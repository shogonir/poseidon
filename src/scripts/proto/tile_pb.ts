// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file tile.proto (package vector_tile, syntax proto2)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto2, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message vector_tile.Tile
 */
export class Tile extends Message<Tile> {
  /**
   * @generated from field: repeated vector_tile.Tile.Layer layers = 3;
   */
  layers: Tile_Layer[] = [];

  constructor(data?: PartialMessage<Tile>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "vector_tile.Tile";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 3, name: "layers", kind: "message", T: Tile_Layer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tile {
    return new Tile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tile {
    return new Tile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tile {
    return new Tile().fromJsonString(jsonString, options);
  }

  static equals(a: Tile | PlainMessage<Tile> | undefined, b: Tile | PlainMessage<Tile> | undefined): boolean {
    return proto2.util.equals(Tile, a, b);
  }
}

/**
 * GeomType is described in section 4.3.4 of the specification
 *
 * @generated from enum vector_tile.Tile.GeomType
 */
export enum Tile_GeomType {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: POINT = 1;
   */
  POINT = 1,

  /**
   * @generated from enum value: LINESTRING = 2;
   */
  LINESTRING = 2,

  /**
   * @generated from enum value: POLYGON = 3;
   */
  POLYGON = 3,
}
// Retrieve enum metadata with: proto2.getEnumType(Tile_GeomType)
proto2.util.setEnumType(Tile_GeomType, "vector_tile.Tile.GeomType", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "POINT" },
  { no: 2, name: "LINESTRING" },
  { no: 3, name: "POLYGON" },
]);

/**
 * Variant type encoding
 * The use of values is described in section 4.1 of the specification
 *
 * @generated from message vector_tile.Tile.Value
 */
export class Tile_Value extends Message<Tile_Value> {
  /**
   * Exactly one of these values must be present in a valid message
   *
   * @generated from field: optional string string_value = 1;
   */
  stringValue?: string;

  /**
   * @generated from field: optional float float_value = 2;
   */
  floatValue?: number;

  /**
   * @generated from field: optional double double_value = 3;
   */
  doubleValue?: number;

  /**
   * @generated from field: optional int64 int_value = 4;
   */
  intValue?: bigint;

  /**
   * @generated from field: optional uint64 uint_value = 5;
   */
  uintValue?: bigint;

  /**
   * @generated from field: optional sint64 sint_value = 6;
   */
  sintValue?: bigint;

  /**
   * @generated from field: optional bool bool_value = 7;
   */
  boolValue?: boolean;

  constructor(data?: PartialMessage<Tile_Value>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "vector_tile.Tile.Value";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "string_value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "float_value", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 3, name: "double_value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 4, name: "int_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 5, name: "uint_value", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 6, name: "sint_value", kind: "scalar", T: 18 /* ScalarType.SINT64 */, opt: true },
    { no: 7, name: "bool_value", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tile_Value {
    return new Tile_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tile_Value {
    return new Tile_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tile_Value {
    return new Tile_Value().fromJsonString(jsonString, options);
  }

  static equals(a: Tile_Value | PlainMessage<Tile_Value> | undefined, b: Tile_Value | PlainMessage<Tile_Value> | undefined): boolean {
    return proto2.util.equals(Tile_Value, a, b);
  }
}

/**
 * Features are described in section 4.2 of the specification
 *
 * @generated from message vector_tile.Tile.Feature
 */
export class Tile_Feature extends Message<Tile_Feature> {
  /**
   * @generated from field: optional uint64 id = 1 [default = 0];
   */
  id?: bigint;

  /**
   * Tags of this feature are encoded as repeated pairs of
   * integers.
   * A detailed description of tags is located in sections
   * 4.2 and 4.4 of the specification
   *
   * @generated from field: repeated uint32 tags = 2 [packed = true];
   */
  tags: number[] = [];

  /**
   * The type of geometry stored in this feature.
   *
   * @generated from field: optional vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];
   */
  type?: Tile_GeomType;

  /**
   * Contains a stream of commands and parameters (vertices).
   * A detailed description on geometry encoding is located in 
   * section 4.3 of the specification.
   *
   * @generated from field: repeated uint32 geometry = 4 [packed = true];
   */
  geometry: number[] = [];

  constructor(data?: PartialMessage<Tile_Feature>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "vector_tile.Tile.Feature";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true, default: protoInt64.uParse("0") },
    { no: 2, name: "tags", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true, packed: true },
    { no: 3, name: "type", kind: "enum", T: proto2.getEnumType(Tile_GeomType), opt: true, default: Tile_GeomType.UNKNOWN },
    { no: 4, name: "geometry", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true, packed: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tile_Feature {
    return new Tile_Feature().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tile_Feature {
    return new Tile_Feature().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tile_Feature {
    return new Tile_Feature().fromJsonString(jsonString, options);
  }

  static equals(a: Tile_Feature | PlainMessage<Tile_Feature> | undefined, b: Tile_Feature | PlainMessage<Tile_Feature> | undefined): boolean {
    return proto2.util.equals(Tile_Feature, a, b);
  }
}

/**
 * Layers are described in section 4.1 of the specification
 *
 * @generated from message vector_tile.Tile.Layer
 */
export class Tile_Layer extends Message<Tile_Layer> {
  /**
   * Any compliant implementation must first read the version
   * number encoded in this message and choose the correct
   * implementation for this version number before proceeding to
   * decode other parts of this message.
   *
   * @generated from field: required uint32 version = 15 [default = 1];
   */
  version?: number;

  /**
   * @generated from field: required string name = 1;
   */
  name?: string;

  /**
   * The actual features in this tile.
   *
   * @generated from field: repeated vector_tile.Tile.Feature features = 2;
   */
  features: Tile_Feature[] = [];

  /**
   * Dictionary encoding for keys
   *
   * @generated from field: repeated string keys = 3;
   */
  keys: string[] = [];

  /**
   * Dictionary encoding for values
   *
   * @generated from field: repeated vector_tile.Tile.Value values = 4;
   */
  values: Tile_Value[] = [];

  /**
   * Although this is an "optional" field it is required by the specification.
   * See https://github.com/mapbox/vector-tile-spec/issues/47
   *
   * @generated from field: optional uint32 extent = 5 [default = 4096];
   */
  extent?: number;

  constructor(data?: PartialMessage<Tile_Layer>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "vector_tile.Tile.Layer";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 15, name: "version", kind: "scalar", T: 13 /* ScalarType.UINT32 */, default: 1 },
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "features", kind: "message", T: Tile_Feature, repeated: true },
    { no: 3, name: "keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "values", kind: "message", T: Tile_Value, repeated: true },
    { no: 5, name: "extent", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true, default: 4096 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tile_Layer {
    return new Tile_Layer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tile_Layer {
    return new Tile_Layer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tile_Layer {
    return new Tile_Layer().fromJsonString(jsonString, options);
  }

  static equals(a: Tile_Layer | PlainMessage<Tile_Layer> | undefined, b: Tile_Layer | PlainMessage<Tile_Layer> | undefined): boolean {
    return proto2.util.equals(Tile_Layer, a, b);
  }
}

